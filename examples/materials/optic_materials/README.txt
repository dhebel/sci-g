-------------------------------------------------------------------

     =========================================================
        GEMC: Monte Carlo Particles and Hardware Simulator
     =========================================================

									simple_materials
                         -------------------

A- GEOMETRY

 The setup consists of four G4Boxes, with different materials

 The 'flux' sensitive type is assigned to each box, with its own identifier.

B- HOW TO BUILD THE GEOMETRY

  The geometry is constructed using the python script:

  ./example.py

  Take a look:
   - the geometry is created using a dedicated 'geometry.py' script.
   - the materials are created using a dedicated 'materials.py' script.


C- OUTPUT

	The output is defined by the entry '+goutput' in the jcard 'example.jcard'.
	By default the output goes simultaneously to two files: 'text' and 'root' format.
	Modify filenames as needed. Comment out not needed entries.


D- HOW TO RUN GEMC

  Sets the desired number of cores, number of events, and verbosity in the jcard 'example.jcard'

  Run gemc:

  gemc example.jcard

  Use the '-gui' option to run interactively:

  gemc example.jcard -gui



#=======================================
#	README simple_det	materials
#=======================================

This folder contains one of the simplest possible projects:  a simple material in a beam. 
This simple case is used to show different ways of defining materials in gemc.  Unless using
a predefined GEANT4 element or NIST material directly in the detector definition, there will 
be a materials text file generated by materials.py for input to gemc.

The GEANT4 material database can be found at:
http://geant4.web.cern.ch/geant4/UserDocumentation/UsersGuides/ForApplicationDeveloper/html/apas06.html

The example should be able to run directly in gemc with the provided text input files and  the gcard option file using the command:
	gemc.command example.gcard

The example should be able to run directly in gemc with the provided text input files and  the gcard option 
file using the command:
	gemc.command example.gcard

If one wants to generate the text input files from the provided python scripts, the location of the python api files should be added to the PYTHONPATH. If installing via the DMG, add the following path for gemc-2.6:
export PYTHONPATH=$PYTHONPATH:/Applications/gemc-2.6.app/gemc.app/Contents/Resources/api/python
Adjust version number for a different gemc version

When this is done, generate the project files using:
	./example.py config.dat
WARNING:  this will overwrite the original project text files.

